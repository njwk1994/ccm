package ccm.server.ws.p6.export;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.5.3
 * 2022-09-14T16:10:38.891+08:00
 * Generated source version: 3.5.3
 *
 */
@WebServiceClient(name = "ExportService",
                  wsdlLocation = "http://192.168.3.18:8206/p6ws/services/ExportService?wsdl",
                  targetNamespace = "http://xmlns.oracle.com/Primavera/P6/WS/WSExport/V2")
public class ExportService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://xmlns.oracle.com/Primavera/P6/WS/WSExport/V2", "ExportService");
    public final static QName ExportPort = new QName("http://xmlns.oracle.com/Primavera/P6/WS/WSExport/V2", "ExportPort");
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.3.18:8206/p6ws/services/ExportService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ExportService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://192.168.3.18:8206/p6ws/services/ExportService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ExportService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ExportService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ExportService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public ExportService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ExportService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ExportService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns ExportPortType
     */
    @WebEndpoint(name = "ExportPort")
    public ExportPortType getExportPort() {
        return super.getPort(ExportPort, ExportPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ExportPortType
     */
    @WebEndpoint(name = "ExportPort")
    public ExportPortType getExportPort(WebServiceFeature... features) {
        return super.getPort(ExportPort, ExportPortType.class, features);
    }

}
